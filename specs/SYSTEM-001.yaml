id: SYSTEM-001
title: "Stabilize and Harden the Agent Test Environment"
summary: "Creates a robust, reliable, and well-documented process for executing Odoo module tests within the agent-specific Docker environments, resolving the current critical blocker."

# --- User Story (for human context) ---
user_story: "As a Coder Agent, I want a single, reliable command to run the tests for a specific module and capture the results, so that I can provide accurate Proof of Execution without debugging the test environment itself."

# --- Strategic & Compliance Constraints ---
component_type: "Core Infrastructure"
scope: "Immediate"
stakeholders:
  - "Executive Architect"
  - "All Coder Agents"
compliance:
  hipaa_implicated: false
  phi_fields: []
  access_control: []
  immutable_core_impact: true # This changes the fundamental development and validation process.

# --- Technical Specification ---
module: "N/A - Repository Level Scripts & Config"
depends_on: []
out_of_scope:
  - "Changing the main CI/CD pipeline."
  - "Modifying the production Docker environment."

# --- Implementation Plan ---
artifacts:
  code:
    - "evv/scripts/run-tests.sh"
    - "hub/scripts/run-tests.sh"
    - "evv/scripts/start-agent-env.sh" # New script for robust startup
    - "hub/scripts/start-agent-env.sh" # New script for robust startup
    - "evv/docker-compose.agent.yml" # (If modifications are needed)
    - "hub/docker-compose.agent.yml" # (If modifications are needed)
  tests:
    - "N/A - The deliverable is a working test *runner*, not new application tests."
  docs:
    - "aos-architecture/prompts/onboarding_coder_agent.md"
    - "aos-architecture/templates/work_order_template.md"
    - "evv/README.md"
    - "hub/README.md"

# --- Business Logic & Validation ---
rules:
  - q: "What is the primary goal?"
    a: "To create a 100% reliable, single-command script (`run-tests.sh`) in each repository (`hub`, `evv`) that agents can call to run tests for a specific module."
  
  - q: "How will port conflicts for agent environments be handled?"
    a: "The new `start-agent-env.sh` script must automatically find and allocate an available port within a predefined range (e.g., 8090-8100). It should check each port for availability before attempting to start a container. Hardcoded ports are forbidden for agent environments to prevent collisions."

  - q: "What should the `run-tests.sh` script do?"
    a: |
      1. Take one argument: the name of the module to test (e.g., `evv_core`).
      2. Spin up a clean, isolated Docker environment for the test run.
      3. Execute the Odoo test suite, targeted *only* to the specified module.
      4. Capture all stdout and stderr to a log file (`proof_of_execution_tests.log`).
      5. Tear down the Docker environment after the run.
      6. Return a `0` exit code if tests pass.
      7. Return a non-zero exit code if tests fail or if the test runner encounters an error.

  - q: "What should the `start-agent-env.sh` script do?"
    a: |
      1. Take one argument: a unique name for the environment (e.g., `WO-SYSTEM-001`).
      2. Scan the port range 8090-8100 to find the first available port.
      3. If no port is available, exit with an error.
      4. Start a new, isolated Docker environment using the available port.
      5. Clearly output the URL for the agent to use (e.g., "Environment started at http://localhost:8092").

  - q: "How will this be verified without tests?"
    a: "Verification will be done by demonstration. The agent must run the new script against the `evv_core` module (which has known passing tests) and provide the logs and a successful exit code. They must then modify a test to fail, run the script again, and provide logs showing the test failure and a non-zero exit code."

# --- Testing & Verification ---
acceptance_criteria:
  - "GIVEN a new `evv/scripts/start-agent-env.sh` script, WHEN executed, THEN it must identify an open port in the 8090-8100 range and successfully launch the Docker container on that port, printing the URL."
  - "GIVEN that ports 8090-8100 are all in use, WHEN `start-agent-env.sh` is executed, THEN it must fail gracefully with a clear error message stating that no available ports were found."
  - "GIVEN a new `evv/scripts/run-tests.sh` script, WHEN I execute `bash scripts/run-tests.sh evv_core` from the `evv` directory, THEN the script must complete with an exit code of 0 and a `proof_of_execution_tests.log` file showing the `evv_core` tests passing."
  - "GIVEN I modify a test in `evv_core` to intentionally fail (e.g., `self.assertEqual(True, False)`), WHEN I execute `bash scripts/run-tests.sh evv_core`, THEN the script must complete with a non-zero exit code and the log file must show the test failure."
  - "GIVEN the script `run-tests.sh`, it must clean up all Docker containers and volumes it created upon completion, whether it succeeds or fails."
  - "GIVEN the `onboarding_coder_agent.md` primer and the `work_order_template.md`, THEN they must both be updated to remove the old, faulty commands and reference the new, unified `run-tests.sh` script."
  - "GIVEN the `README.md` in both the `hub` and `evv` repositories, THEN they must be updated to include instructions on how to use the new test script."

# --- Agent Guidance ---
agent_hints:
  builder_output: "The final deliverable is a shell script (`run-tests.sh`) that is robust and simple to use. It should handle all Docker-related logic internally. Pay close attention to error handling and cleanup."
  qa_output: "You will QA your own work by demonstrating both a successful run and a failed run, as described in the acceptance criteria. This proof is non-negotiable."
  security_focus: "Ensure the script does not require `sudo` privileges or expose any sensitive information in its logs."
